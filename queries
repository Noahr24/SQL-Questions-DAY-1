--Hello World of SQL Querying, SELECT ALL records of a given table (actor)
SELECT *
FROM actor;

-- query for first_name and last_name in actor table 
SELECT first_name, last_name
FROM actor;

-- Query for first_name and last_name where the first name is equal to 'Nick' using WHERE CLAUSE
SELECT first_name, last_name
FROM actor
WHERE first_name = 'Nick';

-- Query for first/last where first name is equal to 'Nick' using Where and Like clauses
SELECT first_name, last_name
FROM actor
WHERE first_name LIKE 'Nick';


-- Query for first/last where ffirst name starts with a 'J' using the LIKE/WHERE clauses - wildcard %
SELECT first_name, last_name
FROM actor
WHERE first_name LIKE 'J%';


-- Query for first/last where first name starts K and is followed by 2 more characters LIKE/WHERE - underscore
SELECT first_name, last_name
FROM actor
WHERE first_name LIKE 'K__';


-- Query for first/last where first name starts K and is followed by 2 characters ends with a th - combo of _ and wildcard (%)
SELECT first_name, last_name
FROM actor
WHERE first_name LIKE 'K__%th';

-- Comparing operators in SQL
-- Greater Than (>) -- Less Than (<)
-- Greater or Equal (>=) -- Less or Equal (<=)
-- Not Equal to (<>) -- same as != in python



-- Explore data with SELECT * Query (typically do this when changing to a new table)
SELECT *
FROM payment;


-- Query for customer_id and amount where amount is greater than 2.0
SELECT customer_id, amount
FROM payment
WHERE amount > 2.00;


-- Same query as above for amounts less than 7.99
SELECT customer_id, amount
FROM payment
WHERE amount < 7.99;


-- Same query as above for amounts less than or equal to 7.99 (ASC = Ascending, DESC - Descending orders)
SELECT customer_id, amount
FROM payment
WHERE amount <= 7.99
ORDER BY amount ASC;


-- Query for the same data where amount is between $6.00 and $7.99 order in Descending order
SELECT customer_id, amount
FROM payment
WHERE amount BETWEEN 6.00 and 7.99
ORDER BY amount DESC;


-- Query for same data where amount is not equal to 0 order from lowest to highest amont
SELECT customer_id, amount FROM payment
WHERE amount <> 0.00
ORDER BY amount ASC;


-- SQL Aggregations => SUM(), AVG(), COUNT(), MIN(), MAX()


-- Query to find the sum of all payments of $5.99
SELECT SUM(amount)
FROM payment
WHERE amount > 5.99;


-- Query to find the average amount for all payments above $5.99
SELECT AVG(amount) FROM payment
WHERE amount > 5.99;


-- Query to display the count of amount for all payments greater $5.99
SELECT COUNT(amount) FROM payment WHERE amount >5.99;


-- Query to find the count of unique amounts paid over 5.99
SELECT COUNT(DISTINCT amount) FROM payment
WHERE amount > 5.99;


-- SELECT COUNT(DISTINCT district)
-- FROM address


-- Query to show the minumum payment amount greater than 7.99
SELECT MIN(amount) 
FROM payment
WHERE amount > 7.99;


-- Query to show the maximum payment greater than 7.99 -- Alias column as 'MAX_payment' in output
SELECT MAX(amount) AS MAX_payment FROM payment WHERE amount > 7.99;


-- More specific comparisons
SELECT amount FROM payment
WHERE amount = 7.99;


-- Exploratory Query
SELECT *
FROM payment;


-- Query for like amounts grouped together along with their total count
SELECT amount, COUNT (amount)
FROM payment
GROUP BY amount
ORDER BY count DESC;


-- Query for customer_id and the total sum of all of their payment amount
SELECT customer_id, SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC;


-- Query to display customer_ids that show up more than once
-- grouping by customer email address
-- HAVING is very similar to where, must be used if checking conditional with aggregator
SELECT COUNT(customer_id), email
FROM customer
GROUP BY email
HAVING COUNT(customer_id) > 1;


-- Query to find customers with an ID over 450 that have paid more tha 100 in total
SELECT customer_id, SUM(amount) 
FROM payment
WHERE customer_id > 450 
Group BY customer_id
HAVING SUM(amount) > 100
ORDER BY customer_id DESC;


